// -  Створити функцію конструктор для об'єкту який описує теги
// Властивості
//  -назва тегу
//  - опис його дій
//  - масив з атрибутами (2-3 атрибути максимум)
//  Кожен атрибут описати як окремий який буде містити
//  -назву атрибуту
//  -опис дії атрибуту
//  інформацію брати з htmlbook.ru

function a() {
    this.tagName = 'a',
        this.action = 'Тег <a> является одним из важных элементов HTML и предназначен для создания ссылок. В зависимости от присутствия атрибутов name или href тег <a> устанавливает ссылку или якорь. Якорем называется закладка внутри страницы, которую можно указать в качестве цели ссылки. При использовании ссылки, которая указывает на якорь, происходит переход к закладке внутри веб-страницы.',
        this.atrib = {
            first: 'accesskey',
            Second: 'coords'
        }
}

function div() {
    this.tagName = 'div',
        this.action = 'Элемент <div> является блочным элементом и предназначен для выделения фрагмента документа с целью изменения вида содержимого. Как правило, вид блока управляется с помощью стилей. Чтобы не описывать каждый раз стиль внутри тега, можно выделить стиль во внешнюю таблицу стилей, а для тега добавить атрибут class или id с именем селектора.',
        this.atrib = {
            first: 'align',
            Second: 'title'
        }
}

function h1() {
    this.tagName = 'h1',
        this.action = 'HTML предлагает шесть заголовков разного уровня, которые показывают относительную важность секции, расположенной после заголовка. Так, тег <h1> представляет собой наиболее важный заголовок первого уровня, а тег <h6> служит для обозначения заголовка шестого уровня и является наименее значительным. По умолчанию, заголовок первого уровня отображается самым крупным шрифтом жирного начертания, заголовки последующего уровня по размеру меньше. Теги <h1>,...,<h6> относятся к блочным элементам, они всегда начинаются с новой строки, а после них другие элементы отображаются на следующей строке. Кроме того, перед заголовком и после него добавляется пустое пространство.',
        this.atrib = {
            first: 'align'
        }
}

function span() {
    this.tagName = 'span',
        this.action = 'Тег <span> предназначен для определения строчных элементов документа. В отличие от блочных элементов, таких как <table>, <p> или <div>, с помощью тега <span> можно выделить часть информации внутри других тегов и установить для нее свой стиль. Например, внутри абзаца (тега <p>) можно изменить цвет и размер первой буквы, если добавить начальный и конечный тег <span> и определить для него стиль текста. Чтобы не описывать каждый раз стиль внутри тега, можно выделить стиль во внешнюю таблицу стилей, а для тега добавить атрибут class или id с именем селектора.',
        this.atrib = {
            first: 'accesskey',
            Second: 'class'
        }
}

function input() {
    this.tagName = 'input',
        this.action = 'Тег <input> является одним из разносторонних элементов формы и позволяет создавать разные элементы интерфейса и обеспечить взаимодействие с пользователем. Главным образом <input> предназначен для создания текстовых полей, различных кнопок, переключателей и флажков. Хотя элемент <input> не требуется помещать внутрь контейнера <form>, определяющего форму, но если введенные пользователем данные должны быть отправлены на сервер, где их обрабатывает серверная программа, то указывать <form> обязательно. То же самое обстоит и в случае обработки данных с помощью клиентских приложений, например, скриптов на языке JavaScript.',
        this.atrib = {
            first: 'accept',
            Second: 'accesskey'
        }
}

function form() {
    this.tagName = 'form',
        this.action = 'Связывает поле с формой по её идентификатору. Такая связь необходима в случае, когда поле располагается за пределами <form>, например, при создании её программно или по соображениям дизайна.',
        this.atrib = {
            first: 'accept-charset',
            Second: 'action'
        }
}

function option() {
    this.tagName = 'option',
        this.action = 'Тег <option> определяет отдельные пункты списка, создаваемого с помощью контейнера <select>. Ширина списка определяется самым широким текстом, указанным в теге <option>, а также может изменяться с помощью стилей. Если планируется отправлять данные списка на сервер, то требуется поместить элемент <select> внутрь формы. Это также необходимо, когда к данным списка идет обращение через скрипты.',
        this.atrib = {
            first: 'disabled',
            Second: 'label'
        }
}

function select() {
    this.tagName = 'select',
        this.action = 'Тег <select> позволяет создать элемент интерфейса в виде раскрывающегося списка, а также список с одним или множественным выбором, как показано далее. Конечный вид зависит от использования атрибута size тега <select>, который устанавливает высоту списка. Ширина списка определяется самым широким текстом, указанным в теге <option>, а также может изменяться с помощью стилей. Каждый пункт создается с помощью тега <option>, который должен быть вложен в контейнер <select>. Если планируется отправлять данные списка на сервер, то требуется поместить элемент <select> внутрь формы. Это также необходимо, когда к данным списка идет обращение через скрипты.',
        this.atrib = {
            first: 'accesskey',
            Second: 'autofocus'
        }
}
let aOb = new a()
console.log(aOb)
let divOb = new div()
console.log(divOb)
let h1Ob = new h1()
console.log(h1Ob)
let spanOb = new span()
console.log(spanOb)
let inputOb = new input()
console.log(inputOb)
let formOb = new form()
console.log(formOb)
let optionOb = new option()
console.log(optionOb)
let selectOb = new select()
console.log(selectOb)


// -  Створити класс  для об'єкту який описує теги
// Властивості
//  -назва тегу
//  - опис його дій
//  - масив з атрибутами (2-3 атрибути максимум)
//  Кожен атрибут описати як окремий який буде містити
//  -назву атрибуту
//  -опис дії атрибуту
//  інформацію брати з htmlbook.ru

console.log('<br>')
console.log('<br>')
console.log('<br>')
console.log('<br>')
class all {
    constructor(tagName, action, atrib) {
        this.tagName = tagName,
            this.action = action,
            this.atrib = atrib;
    }

}

let a1 = new all('a',
    'Тег <a> является одним из важных элементов HTML и предназначен для создания ссылок. В зависимости от присутствия атрибутов name или href тег <a> устанавливает ссылку или якорь. Якорем называется закладка внутри страницы, которую можно указать в качестве цели ссылки. При использовании ссылки, которая указывает на якорь, происходит переход к закладке внутри веб-страницы.', {
        first: 'accesskey',
        Second: 'coords'
    });
console.log(a1)

let div1 = new all('div', 'Элемент <div> является блочным элементом и предназначен для выделения фрагмента документа с целью изменения вида содержимого. ', {
    first: 'accesskey',
    Second: 'coords'
});
console.log(div1)

let h11 = new all('h1', 'HTML предлагает шесть заголовков разного уровня, которые показывают относительную важность секции, расположенной после заголовка.', {
    first: 'align'
})
console.log(h11)

let span1 = new all('span', 'Тег <span> предназначен для определения строчных элементов документа.', {
    first: 'accesskey',
    Second: 'class'
})
console.log(span1)

let input1 = new all('input', 'Тег <input> является одним из разносторонних элементов формы и позволяет создавать разные элементы интерфейса и обеспечить взаимодействие с пользователем.', {
    first: 'accept',
    Second: 'accesskey'
})
console.log(input1)

let form1 = new all('form', 'Связывает поле с формой по её идентификатору.', {
    first: 'accept-charset',
    Second: 'action'
})
console.log(form1)

let option1 = new all('option', 'Тег <option> определяет отдельные пункты списка, создаваемого с помощью контейнера <select>.', {
    first: 'disabled',
    Second: 'label'
})
console.log(option1)

let select1 = new all('select', 'Тег <select> позволяет создать элемент интерфейса в виде раскрывающегося списка, а также список с одним или множественным выбором, как показано далее.', {
    first: 'accesskey',
    Second: 'autofocus'
})
console.log(select1)



// Створити об'єкт car, з властивостями модель, виробник, рік випуску, максимальна швидкість, об'єм двигуна. додати в об'єкт функції:
// -- drive () - яка виводить в консоль "їдемо зі швидкістю {максимальна швидкість} на годину"
// -- info () - яка виводить всю інформацію про автомобіль
// -- increaseMaxSpeed (newSpeed) - яка підвищує значення максимальної швидкості на значення newSpeed
// -- changeYear (newValue) - змінює рік випуску на значення newValue
// -- addDriver (driver) - приймає об'єкт який "водій" з довільним набором полів, і доавляет його в поточний об'єкт car

let car = {
    model: 'S',
    producer: 'Mersedes',
    graduationYear: 2002,
    maxSpeed: 190,
    engineCapacity: 5,

    drive : function(){
        console.log(`Їдемо зі швидкістю ${this.maxSpeed} на годину`)
    },
    info : function(){
        console.log(`Model: ${this.model}, Producer: ${this.producer}, GraduationYear: ${this.graduationYear}, Max spead: ${this.maxSpeed}, Engine capacity: ${this.engineCapacity}`)
    },
    incrementMaxSpead : function(){
        this.maxSpeed += 50;
    },
    changeYear : function(){
        let newValue = 2010;
        this.graduationYear = newValue;
    },
    addDriver : function(driver){
        this.driver = driver;
    }
}

car.info()
car.drive()
car.changeYear()
car.info()
car.incrementMaxSpead()
car.info()
car.addDriver({name: 'Ivan',agr: 43})
car.info()
console.log(car)
